`timescale 10 ps / 10 ps

`default_nettype none

module lpf_3bit #(
    parameter integer WIDTH = 16
) (
    input  logic [WIDTH-1:0] i_cosine,
    input  logic [WIDTH-1:0] i_sine,
    input  logic             i_ready,
    output logic [WIDTH-1:0] o_cosine,
    output logic [WIDTH-1:0] o_sine,
    input  logic             i_clock
);

// Tap Delay Line Signals
{% for tdl in delay_indices %}logic [2*WIDTH-1:0] delay_reg{{ tdl }};
{% endfor %}

// Tap Delay Line
always_ff @ (posedge i_clock) begin
    if (i_ready == 1'b1) begin{% for tdl in delay_indices %}
        {% if tdl == 0 %}delay_reg{{ tdl }} <= {
            i_sine, i_cosine
        };{% else %}delay_reg{{ tdl }} <= delay_reg{{ tdl-1 }};{% endif %}{% endfor %}
    end
end

// Preload Accumulator Registers{% for tdl in delays_re_2bit %}
logic [WIDTH-1:0] rere_p2_reg{{loop.index0}}_stage0;{% endfor %}{% for tdl in delays_re_1bit %}
logic [WIDTH-1:0] rere_p1_reg{{loop.index0}}_stage0;{% endfor %}{% for tdl in delays_re_m1bit %}
logic [WIDTH-1:0] rere_m1_reg{{loop.index0}}_stage0;{% endfor %}{% for tdl in delays_re_m2bit %}
logic [WIDTH-1:0] rere_m2_reg{{loop.index0}}_stage0;{% endfor %}
{% for tdl in delays_im_2bit %}
logic [WIDTH-1:0] reim_p2_reg{{loop.index0}}_stage0;{% endfor %}{% for tdl in delays_im_1bit %}
logic [WIDTH-1:0] reim_p1_reg{{loop.index0}}_stage0;{% endfor %}{% for tdl in delays_im_m1bit %}
logic [WIDTH-1:0] reim_m1_reg{{loop.index0}}_stage0;{% endfor %}{% for tdl in delays_im_m2bit %}
logic [WIDTH-1:0] reim_m2_reg{{loop.index0}}_stage0;{% endfor %}

always_ff @ (posedge i_clock) begin
    if (i_ready == 1'b1) begin
        // Real Real + Imag Real{% for tdl in delays_re_2bit %}
        rere_p2_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[WIDTH-1:0];{% endfor %}{% for tdl in delays_re_1bit %}
        rere_p1_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[WIDTH-1:0];{% endfor %}{% for tdl in delays_re_m1bit %}
        rere_m1_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[WIDTH-1:0];{% endfor %}{% for tdl in delays_re_m2bit %}
        rere_m2_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[WIDTH-1:0];{% endfor %}
        // Real Imag + Imag Imag{% for tdl in delays_im_2bit %}
        reim_p2_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[2*WIDTH-1:WIDTH];{% endfor %}{% for tdl in delays_im_1bit %}
        reim_p1_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[2*WIDTH-1:WIDTH];{% endfor %}{% for tdl in delays_im_m1bit %}
        reim_m1_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[2*WIDTH-1:WIDTH];{% endfor %}{% for tdl in delays_im_m2bit %}
        reim_m2_reg{{loop.index0}}_stage0 <= delay_reg{{ tdl }}[2*WIDTH-1:WIDTH];{% endfor %}
    end
end

{% for stage in stage_indices[1:] %}// Stage {{ stage }}{% for tdl in log2_delays_re_2bit[stage] %}
logic [WIDTH+{{stage-1}}:0] rere_p2_reg{{loop.index0}}_stage{{stage}};{% endfor %}{% for tdl in log2_delays_re_1bit[stage] %}
logic [WIDTH+{{stage-1}}:0] rere_p1_reg{{loop.index0}}_stage{{stage}};{% endfor %}{% for tdl in log2_delays_re_m1bit[stage] %}
logic [WIDTH+{{stage-1}}:0] rere_m1_reg{{loop.index0}}_stage{{stage}};{% endfor %}{% for tdl in log2_delays_re_m2bit[stage] %}
logic [WIDTH+{{stage-1}}:0] rere_m2_reg{{loop.index0}}_stage{{stage}};{% endfor %}
{% for tdl in log2_delays_im_2bit[stage] %}
logic [WIDTH+{{stage-1}}:0] reim_p2_reg{{loop.index0}}_stage{{stage}};{% endfor %}{% for tdl in log2_delays_im_1bit[stage] %}
logic [WIDTH+{{stage-1}}:0] reim_p1_reg{{loop.index0}}_stage{{stage}};{% endfor %}{% for tdl in log2_delays_im_m1bit[stage] %}
logic [WIDTH+{{stage-1}}:0] reim_m1_reg{{loop.index0}}_stage{{stage}};{% endfor %}{% for tdl in log2_delays_im_m2bit[stage] %}
logic [WIDTH+{{stage-1}}:0] reim_m2_reg{{loop.index0}}_stage{{stage}};{% endfor %}

always_ff @(posedge i_clock) begin
    if (i_ready == 1'b1) begin
        {% for tdl in log2_delays_re_2bit[stage] %}{% if log2_delays_re_2bit[stage-1]|length > 1 %}
        rere_p2_reg{{loop.index0}}_stage{{stage}} <= rere_p2_reg{{2*loop.index0}}_stage{{stage-1}} + rere_p2_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        rere_p2_reg{{loop.index0}}_stage{{stage}} <= rere_p2_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}{% for tdl in log2_delays_re_1bit[stage] %}{% if log2_delays_re_1bit[stage-1]|length > 1 %}
        rere_p1_reg{{loop.index0}}_stage{{stage}} <= rere_p1_reg{{2*loop.index0}}_stage{{stage-1}} + rere_p1_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        rere_p1_reg{{loop.index0}}_stage{{stage}} <= rere_p1_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}{% for tdl in log2_delays_re_m1bit[stage] %}{% if log2_delays_re_m1bit[stage-1]|length > 1 %}
        rere_m1_reg{{loop.index0}}_stage{{stage}} <= rere_m1_reg{{2*loop.index0}}_stage{{stage-1}} + rere_m1_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        rere_m1_reg{{loop.index0}}_stage{{stage}} <= rere_m1_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}{% for tdl in log2_delays_re_m2bit[stage] %}{% if log2_delays_re_m2bit[stage-1]|length > 1 %}
        rere_m2_reg{{loop.index0}}_stage{{stage}} <= rere_m2_reg{{2*loop.index0}}_stage{{stage-1}} + rere_m2_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        rere_m2_reg{{loop.index0}}_stage{{stage}} <= rere_m2_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}
        {% for tdl in log2_delays_im_2bit[stage] %}{% if log2_delays_im_2bit[stage-1]|length > 1 %}
        reim_p2_reg{{loop.index0}}_stage{{stage}} <= reim_p2_reg{{2*loop.index0}}_stage{{stage-1}} + reim_p2_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        reim_p2_reg{{loop.index0}}_stage{{stage}} <= reim_p2_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}{% for tdl in log2_delays_im_1bit[stage] %}{% if log2_delays_im_1bit[stage-1]|length > 1 %}
        reim_p1_reg{{loop.index0}}_stage{{stage}} <= reim_p1_reg{{2*loop.index0}}_stage{{stage-1}} + reim_p1_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        reim_p1_reg{{loop.index0}}_stage{{stage}} <= reim_p1_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}{% for tdl in log2_delays_im_m1bit[stage] %}{% if log2_delays_im_m1bit[stage-1]|length > 1 %}
        reim_m1_reg{{loop.index0}}_stage{{stage}} <= reim_m1_reg{{2*loop.index0}}_stage{{stage-1}} + reim_m1_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        reim_m1_reg{{loop.index0}}_stage{{stage}} <= reim_m1_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% endfor %}{% for tdl in log2_delays_im_m2bit[stage] %}{% if log2_delays_im_m2bit[stage-1]|length > 1 %}
        reim_m2_reg{{loop.index0}}_stage{{stage}} <= reim_m2_reg{{2*loop.index0}}_stage{{stage-1}} + reim_m2_reg{{2*loop.index0+1}}_stage{{stage-1}};{% else %}
        reim_m2_reg{{loop.index0}}_stage{{stage}} <= reim_m2_reg{{loop.index0}}_stage{{stage-1}};{% endif %}{% set last_loop_count = loop.index0 %}{% endfor %}
    end
end
{% endfor %}

// Output
logic [WIDTH-1+{{stage_indices|last}}:0] reim_p2_reg{{last_loop_count}}_stage{{stage_indices|last}};
logic [WIDTH-1+{{stage_indices|last}}:0] reim_p1_reg{{last_loop_count}}_stage{{stage_indices|last}};

logic [WIDTH-1+{{stage_indices|last}}:0] imre_p2_reg{{last_loop_count}}_stage{{stage_indices|last}};
logic [WIDTH-1+{{stage_indices|last}}:0] imim_p1_reg{{last_loop_count}}_stage{{stage_indices|last}};

always_ff @(posedge i_clock) begin
    o_cosine <= ;
    o_sine <= ;
end

endmodule: lpf_3bit

`default_nettype wire
