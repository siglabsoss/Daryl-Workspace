`timescale 10ps / 10ps

`default_nettype none

module dds (
    input  wire logic [36-1:0] i_phase_inc,
    input  wire logic [36-1:0] i_phase_inc_valid,
    output      logic [36-1:0] o_cosine_data,
    output      logic [36-1:0] o_sine_data,
    output      logic          i_ready,
    input  wire logic          i_clock,
    input  wire logic          i_reset
);

// Phase increment
logic [36-1:0] phase_inc_reg;
logic [36-1:0] phase_accum;

always_ff @ (posedge i_clock) begin
    // Read input phase increment
    if (i_phase_inc_valid == 1'b1) begin
        phase_inc_reg <= i_phase_inc;
    end
    // Increment phase whenever an output is requested
    if (i_reset == 1'b1) begin
        phase_accum <= '0;
    end else if (i_ready == 1'b1) begin
        phase_accum <= phase_accum + phase_inc_reg;
    end
end

// Sine/Cosine Look Up Table
logic signed [WIDTH-1:0]       cosine_reg0;
logic signed [WIDTH-1:0]       sine_reg0;
logic [36-{{ lut_width }}-1:0] residual_reg0;
always_ff @ (posedge i_clock) begin
    if (i_ready == 1'b1) begin
        // Perform table look up
        case(phase_accum[36-1:36-{{ lut_width }}]){% for lvalue in lut_values %}{% if lvalue != lut_values[-1] %}
        {{ lvalue }}: begin{% endif %}{% if lvalue == lut_values[-1] %}
        default: begin{% endif %}
            cosine_reg0 <= 36'sb{{ cos_values[lvalue] }};
            sine_reg0   <= 36'sb{{ sin_values[lvalue] }};
        end{% endfor %}
        endcase
        // Compute residual (value not obtained from table)
        correction_reg0 <= phase_accum[36-{{ lut_width }}-1:0];
    end
end

// Perform Correction
always_ff @ (posedge i_clock) begin
    if (i_ready == 1'b1) begin
        cosine_reg1 <= cosine_reg0;
        cosine_corr_reg1 <= sine_reg0 * $signed({1'b0, correction_reg0});
        sine_reg1 <= cosine_reg0 * $signed({1'b0, correction_reg0});
        sine_corr_reg1 <= cosine_reg0 * $signed({1'b0, correction_reg0});
        o_cosine_data <= cosine_reg1 - cosine_corr_reg1;
        o_sine_data <= sine_reg1 + sine_corr_reg1;
    end
end

endmodule: dds

`default_nettype wire
