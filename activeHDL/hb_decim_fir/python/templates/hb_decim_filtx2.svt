`timescale 10ps / 10ps

`default_nettype none

module hb_decim_firx2_{{ name }} #(
    parameter integer WIDTH = 16
) (
    input  wire logic [WIDTH-1:0] i_inph_data,
    input  wire logic [WIDTH-1:0] i_quad_data,
    input  wire logic [WIDTH-1:0] i_inph_delay_data,
    input  wire logic [WIDTH-1:0] i_quad_delay_data,
    input  wire logic             i_valid,
    output      logic [WIDTH-1:0] o_inph_data,
    output      logic [WIDTH-1:0] o_quad_data,
    output      logic             o_valid,
    input  wire logic             i_clock,
    input  wire logic             i_reset
);

// Tap delay line registers
{% for tdl in delay_range[0] %}
logic signed [WIDTH-1:0]       inph_tdl0_reg{{ tdl }};
logic signed [WIDTH-1:0]       quad_tdl0_reg{{ tdl }};
{% endfor %}{% for tdl in delay_range[1] %}
logic signed [WIDTH-1:0]       inph_tdl1_reg{{ tdl }};
logic signed [WIDTH-1:0]       quad_tdl1_reg{{ tdl }};
{% endfor %}
logic valid0_reg0;

always_ff @ (posedge i_clock) begin
    // Tap delay line for polyphase component zero
    if (i_valid == 1'b1) begin{% for tdl in delay_range[0] %}{% if tdl == 0 %}
        inph_tdl0_reg{{ tdl }} <= i_inph_data;
        quad_tdl0_reg{{ tdl }} <= i_quad_data;{% else %}
        inph_tdl0_reg{{ tdl }} <= inph_tdl0_reg{{ tdl-1 }};
        quad_tdl0_reg{{ tdl }} <= quad_tdl0_reg{{ tdl-1 }};{% endif %}{% endfor %}
    end
    // Tap delay line for polyphase component one (delay + shift)
    if (i_valid == 1'b1) begin{% for tdl in delay_range[1] %}{% if tdl == 0 %}
        inph_tdl1_reg{{ tdl }} <= i_inph_delay_data;
        quad_tdl1_reg{{ tdl }} <= i_quad_delay_data;{% else %}
        inph_tdl1_reg{{ tdl }} <= inph_tdl1_reg{{ tdl-1 }};
        quad_tdl1_reg{{ tdl }} <= quad_tdl1_reg{{ tdl-1 }};{% endif %}{% endfor %}
    end
    // Compute an output for this input
    valid0_reg0 <= i_valid;
end

{% for tdl in delay_range[0] %}
logic signed [WIDTH-1:0] inph_term_reg{{ tdl }};
logic signed [WIDTH-1:0] quad_term_reg{{ tdl }};
{% endfor %}{% for tdl in delay_range[0][:max_delay//2] %}
logic signed [WIDTH:0] inph_sum_reg{{ tdl }};
logic signed [WIDTH:0] quad_sum_reg{{ tdl }};
{% endfor %}{% for tdl in delay_range[0][:max_delay//2] %}
logic signed [18+WIDTH:0] inph_prod_reg{{ tdl }};
logic signed [18+WIDTH:0] quad_prod_reg{{ tdl }};
{% endfor %}

logic signed [WIDTH-1:0] inph_del_reg0;
logic signed [WIDTH-1:0] quad_del_reg0;

logic signed [WIDTH-1:0] inph_del_reg1;
logic signed [WIDTH-1:0] quad_del_reg1;

logic signed [WIDTH-1:0] inph_del_reg2;
logic signed [WIDTH-1:0] quad_del_reg2;

logic signed [WIDTH-1:0] inph_del_reg3;
logic signed [WIDTH-1:0] quad_del_reg3;

logic valid1_reg0;
logic valid1_reg1;
logic valid1_reg2;
logic valid1_reg3;

always_ff @ (posedge i_clock) begin
    // Preadders for E0(z){% for tdl in delay_range[0] %}{% if tdl == 0 %}
    if ((i_valid == 1'b1) && (pp_toggle == 1'b0)) begin
        inph_term_reg{{ tdl }} <= i_inph_data;
        quad_term_reg{{ tdl }} <= i_quad_data;
    end{% else %}
    inph_term_reg{{ tdl }} <= inph_tdl0_reg{{ tdl }};
    quad_term_reg{{ tdl }} <= quad_tdl0_reg{{ tdl }};{% endif %}
{% endfor %}
    // Preadder addition{% for tdl in delay_range[0][:max_delay//2] %}
    inph_sum_reg{{ tdl }} <= { inph_term_reg{{ tdl }}[WIDTH-1], inph_term_reg{{ tdl }} } + { inph_term_reg{{ max_delay-tdl-1 }}[WIDTH-1], inph_term_reg{{ max_delay-tdl-1 }} };
    quad_sum_reg{{ tdl }} <= { quad_term_reg{{ tdl }}[WIDTH-1], quad_term_reg{{ tdl }} } + { quad_term_reg{{ max_delay-tdl-1 }}[WIDTH-1], quad_term_reg{{ max_delay-tdl-1 }} };
{% endfor %}{% for tdl in delay_range[0][:max_delay//2] %}
    inph_prod_reg{{ tdl }} <= $signed(18'sb{{ coeffs[tdl] }}) * $signed(inph_sum_reg{{ tdl }});
    quad_prod_reg{{ tdl }} <= $signed(18'sb{{ coeffs[tdl] }}) * $signed(quad_sum_reg{{ tdl }});
{% endfor %}

    // Pipeline delays for E1(z)
    inph_del_reg0 <= inph_tdl1_reg{{ max_delay // 2 - 1 }};
    quad_del_reg0 <= quad_tdl1_reg{{ max_delay // 2 - 1 }};

    inph_del_reg1 <= inph_del_reg0;
    quad_del_reg1 <= quad_del_reg0;

    inph_del_reg2 <= inph_del_reg1;
    quad_del_reg2 <= quad_del_reg1;

    inph_del_reg3 <= inph_del_reg2;
    quad_del_reg3 <= quad_del_reg2;

    valid1_reg0 <= valid0_reg0;
    valid1_reg1 <= valid1_reg0;
    valid1_reg2 <= valid1_reg1;
    valid1_reg3 <= valid1_reg2;
end

{% for tdl in delay_range[0][:max_delay//4] %}
logic signed [53:0] inph_accum0_reg{{ tdl }};
logic signed [53:0] quad_accum0_reg{{ tdl }};
{% endfor %}
logic signed [WIDTH-1:0] inph_del_reg4;
logic signed [WIDTH-1:0] quad_del_reg4;

logic valid1_reg4;

always_ff @ (posedge i_clock) begin
    // Adder trees for FIR filter{% for tdl in delay_range[0][:max_delay//4] %}
    inph_accum0_reg{{ tdl }} <= inph_prod_reg{{ 2*tdl }} + inph_prod_reg{{ 2*tdl+1 }};
    quad_accum0_reg{{ tdl }} <= quad_prod_reg{{ 2*tdl }} + quad_prod_reg{{ 2*tdl+1 }};
    {% endfor %}
    inph_del_reg4 <= inph_del_reg3;
    quad_del_reg4 <= quad_del_reg3;

    valid1_reg4 <= valid1_reg3;
end

{% for at_num in adder_tree_range %}
{% for tdl in delay_range[0][:max_delay//(4*2**at_num)] %}
logic signed [53:0] inph_accum{{ at_num }}_reg{{ tdl }};
logic signed [53:0] quad_accum{{ at_num }}_reg{{ tdl }};
{% endfor %}
logic signed [WIDTH-1:0] inph_del_reg{{ 4 + at_num }};
logic signed [WIDTH-1:0] quad_del_reg{{ 4 + at_num }};

logic valid1_reg{{ 4 + at_num }};

always_ff @ (posedge i_clock) begin
    // Adder trees for FIR filter{% for tdl in delay_range[0][:max_delay//(4*2**at_num)] %}
    inph_accum{{ at_num }}_reg{{ tdl }} <= inph_accum{{ at_num-1 }}_reg{{ 2*tdl }} + inph_accum{{ at_num-1 }}_reg{{ 2*tdl+1 }};
    quad_accum{{ at_num }}_reg{{ tdl }} <= quad_accum{{ at_num-1 }}_reg{{ 2*tdl }} + quad_accum{{ at_num-1 }}_reg{{ 2*tdl+1 }};
    {% endfor %}
    inph_del_reg{{ 4 + at_num }} <= inph_del_reg{{ 4 + at_num - 1 }};
    quad_del_reg{{ 4 + at_num }} <= quad_del_reg{{ 4 + at_num - 1 }};

    valid1_reg{{ 4 + at_num }} <= valid1_reg{{ 4 + at_num - 1 }};
end{% endfor%}

logic signed [53:0] concatenated_inph_delay;
logic signed [53:0] concatenated_quad_delay;
logic signed [53:0] inph_output_reg;
logic signed [53:0] quad_output_reg;

logic valid2_reg0;

always_ff @ (posedge i_clock) begin
    concatenated_inph_delay = {
        {(54-17-WIDTH){inph_del_reg{{ 4 + adder_tree_range[-1] }}[WIDTH-1]}},
        inph_del_reg{{ 4 + adder_tree_range[-1] }},
        1'b1, // For round half-up algorithm
        16'b0
    };
    concatenated_quad_delay = {
        {(54-17-WIDTH){quad_del_reg{{ 4 + adder_tree_range[-1] }}[WIDTH-1]}},
        quad_del_reg{{ 4 + adder_tree_range[-1] }},
        1'b1, // For round half-up algorithm
        16'b0
    };
    inph_output_reg <= inph_accum{{ adder_tree_range[-1] }}_reg0 + concatenated_inph_delay;
    quad_output_reg <= quad_accum{{ adder_tree_range[-1] }}_reg0 + concatenated_quad_delay;

    valid2_reg0 <= valid1_reg{{ 4 + adder_tree_range[-1] }};
end

always_ff @ (posedge i_clock) begin
    if (valid2_reg0 == 1'b1) begin
        if ($signed(inph_output_reg[53:WIDTH+18-1]) > 0) begin
            o_inph_data <= {1'b0, {(WIDTH-1){1'b1}}};
        end else if ($signed(inph_output_reg[53:WIDTH+18-1]) < -1) begin
            o_inph_data <= {1'b1, {(WIDTH-1){1'b0}}};
        end else begin
            o_inph_data <= inph_output_reg[WIDTH+18-1:18];
        end
        if ($signed(quad_output_reg[53:WIDTH+18-1]) > 0) begin
            o_quad_data <= {1'b0, {(WIDTH-1){1'b1}}};
        end else if ($signed(quad_output_reg[53:WIDTH+18-1]) < -1) begin
            o_quad_data <= {1'b1, {(WIDTH-1){1'b0}}};
        end else begin
            o_quad_data <= quad_output_reg[WIDTH+18-1:18];
        end
    end

    o_valid <= valid2_reg0;
end

endmodule: hb_decim_firx2_{{ name }}

`default_nettype wire
